{"version":3,"file":"static/js/782.673d9ca6.chunk.js","mappings":"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","sources":["components/shared-components/AvatarStatus/index.js","components/shared-components/EllipsisDropdown/index.js","components/shared-components/Flex/index.js","utils/index.js","views/app-views/main/e-commerce/product-list/index.js","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Avatar } from 'antd';\r\nimport {APP_PREFIX_PATH} from \"../../../configs/AppConfig\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst renderAvatar = props => {\r\n\treturn <Avatar {...props} className={`ant-avatar-${props.type}`}>{props.text}</Avatar>;\r\n}\r\n\r\nexport const AvatarStatus = props => {\r\n\tconst { name, suffix, subTitle, id, type, src, icon, size, shape, gap, text, onNameClick } = props\r\n\treturn (\r\n\t\t<Link to={`${APP_PREFIX_PATH}/main/setting/edit-profile/${id}`} className=\"avatar-status d-flex align-items-center\">\r\n\t\t\t{renderAvatar({icon, src, type, size, shape, gap, text })}\r\n\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonNameClick ? \r\n\t\t\t\t\t\t<div onClick={() => onNameClick({name, subTitle, src, id})} className=\"avatar-status-name clickable\">{name}</div> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<div className=\"avatar-status-name\">{name}</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span>{suffix}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"text-muted avatar-status-subtitle\">{subTitle}</div>\r\n\t\t\t</div>\r\n\t\t</Link>\r\n\t)\r\n}\r\n\r\nAvatarStatus.propTypes = {\r\n\tname: PropTypes.string,\r\n\tsrc: PropTypes.string,\r\n\ttype: PropTypes.string,\r\n\tonNameClick: PropTypes.func\r\n}\r\n\r\n\r\nexport default AvatarStatus;\r\n","import React from 'react'\r\nimport { Dropdown, Menu } from 'antd';\r\nimport { EllipsisOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst EllipsisDropdown = props => {\r\n\treturn (\r\n\t\t<Dropdown overlay={props.menu} placement={props.placement} trigger={['click']}>\r\n\t\t\t<div className=\"ellipsis-dropdown\">\r\n\t\t\t\t<EllipsisOutlined />\r\n\t\t\t</div>\r\n\t\t</Dropdown>\r\n\t)\r\n}\r\n\r\nEllipsisDropdown.propTypes = {\r\n\ttrigger: PropTypes.string,\r\n\tplacement: PropTypes.string\r\n}\r\n\r\nEllipsisDropdown.defaultProps = {\r\n\ttrigger: 'click',\r\n\tplacement: 'bottomRight',\r\n\tmenu: <Menu/>\r\n};\r\n\r\nexport default EllipsisDropdown\r\n","import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  \treturn navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t\tif( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tif(!hex) {\r\n\t\t\treturn 'dark'\r\n\t\t}\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Convert RGBA to HEX \r\n\t * @param {String} rgba - RGBA color code e.g 'rgba(197, 200, 198, .2)')'\r\n\t * @return {String} HEX color \r\n\t */\r\n\tstatic rgbaToHex(rgba) {\r\n\t\tconst trim = str => (str.replace(/^\\s+|\\s+$/gm,''))\r\n\t\tconst inParts = rgba.substring(rgba.indexOf(\"(\")).split(\",\"),\r\n\t\t\tr = parseInt(trim(inParts[0].substring(1)), 10),\r\n\t\t\tg = parseInt(trim(inParts[1]), 10),\r\n\t\t\tb = parseInt(trim(inParts[2]), 10),\r\n\t\t\ta = parseFloat(trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2);\r\n\t\t\tconst outParts = [\r\n\t\t\tr.toString(16),\r\n\t\t\tg.toString(16),\r\n\t\t\tb.toString(16),\r\n\t\t\tMath.round(a * 255).toString(16).substring(0, 2)\r\n\t\t];\r\n\r\n\t\toutParts.forEach(function (part, i) {\r\n\t\t\tif (part.length === 1) {\r\n\t\t\t\toutParts[i] = '0' + part;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn (`#${outParts.join('')}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;","import React, {useState} from 'react'\r\nimport { Card, Table, Select, Input, Button, Badge, Menu } from 'antd';\r\nimport ProductListData from \"assets/data/product-list.data.json\"\r\nimport { EyeOutlined, DeleteOutlined, SearchOutlined, PlusCircleOutlined } from '@ant-design/icons';\r\nimport AvatarStatus from 'components/shared-components/AvatarStatus';\r\nimport EllipsisDropdown from 'components/shared-components/EllipsisDropdown';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport NumberFormat from 'react-number-format';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport utils from 'utils'\r\n\r\nconst { Option } = Select\r\n\r\nconst getStockStatus = stockCount => {\r\n\tif(stockCount >= 10) {\r\n\t\treturn <><Badge status=\"success\" /><span>In Stock</span></>\r\n\t}\r\n\tif(stockCount < 10 && stockCount > 0) {\r\n\t\treturn <><Badge status=\"warning\" /><span>Limited Stock</span></>\r\n\t}\r\n\tif(stockCount === 0) {\r\n\t\treturn <><Badge status=\"error\" /><span>Out of Stock</span></>\r\n\t}\r\n\treturn null\r\n}\r\n\r\nconst categories = ['Cloths', 'Bags', 'Shoes', 'Watches', 'Devices']\r\n\r\nconst ProductList = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst [list, setList] = useState(ProductListData)\r\n\tconst [selectedRows, setSelectedRows] = useState([])\r\n\tconst [selectedRowKeys, setSelectedRowKeys] = useState([])\r\n\r\n\tconst dropdownMenu = row => (\r\n\t\t<Menu>\r\n\t\t\t<Menu.Item onClick={() => viewDetails(row)}>\r\n\t\t\t\t<Flex alignItems=\"center\">\r\n\t\t\t\t\t<EyeOutlined />\r\n\t\t\t\t\t<span className=\"ml-2\">View Details</span>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Menu.Item>\r\n\t\t\t<Menu.Item onClick={() => deleteRow(row)}>\r\n\t\t\t\t<Flex alignItems=\"center\">\r\n\t\t\t\t\t<DeleteOutlined />\r\n\t\t\t\t\t<span className=\"ml-2\">{selectedRows.length > 0 ? `Delete (${selectedRows.length})` : 'Delete'}</span>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Menu.Item>\r\n\t\t</Menu>\r\n\t);\r\n\t\r\n\tconst addProduct = () => {\r\n\t\tnavigate(`/app/apps/ecommerce/add-product`)\r\n\t}\r\n\t\r\n\tconst viewDetails = row => {\r\n\t\tnavigate(`/app/apps/ecommerce/edit-product/${row.id}`)\r\n\t}\r\n\t\r\n\tconst deleteRow = row => {\r\n\t\tconst objKey = 'id'\r\n\t\tlet data = list\r\n\t\tif(selectedRows.length > 1) {\r\n\t\t\tselectedRows.forEach(elm => {\r\n\t\t\t\tdata = utils.deleteArrayRow(data, objKey, elm.id)\r\n\t\t\t\tsetList(data)\r\n\t\t\t\tsetSelectedRows([])\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tdata = utils.deleteArrayRow(data, objKey, row.id)\r\n\t\t\tsetList(data)\r\n\t\t}\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\ttitle: 'ID',\r\n\t\t\tdataIndex: 'id'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Product',\r\n\t\t\tdataIndex: 'name',\r\n\t\t\trender: (_, record) => (\r\n\t\t\t\t<div className=\"d-flex\">\r\n\t\t\t\t\t<AvatarStatus size={60} type=\"square\" src={record.image} name={record.name}/>\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Category',\r\n\t\t\tdataIndex: 'category',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'category')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Price',\r\n\t\t\tdataIndex: 'price',\r\n\t\t\trender: price => (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<NumberFormat\r\n\t\t\t\t\t\tdisplayType={'text'} \r\n\t\t\t\t\t\tvalue={(Math.round(price * 100) / 100).toFixed(2)} \r\n\t\t\t\t\t\tprefix={'$'} \r\n\t\t\t\t\t\tthousandSeparator={true} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'price')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Stock',\r\n\t\t\tdataIndex: 'stock',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'stock')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Status',\r\n\t\t\tdataIndex: 'stock',\r\n\t\t\trender: stock => (\r\n\t\t\t\t<Flex alignItems=\"center\">{getStockStatus(stock)}</Flex>\r\n\t\t\t),\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'stock')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: '',\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t<EllipsisDropdown menu={dropdownMenu(elm)}/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\t\r\n\tconst rowSelection = {\r\n\t\tonChange: (key, rows) => {\r\n\t\t\tsetSelectedRows(rows)\r\n\t\t\tsetSelectedRowKeys(key)\r\n\t\t}\r\n\t};\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = e.currentTarget.value? list : ProductListData\r\n\t\tconst data = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(data)\r\n\t\tsetSelectedRowKeys([])\r\n\t}\r\n\r\n\tconst handleShowCategory = value => {\r\n\t\tif(value !== 'All') {\r\n\t\t\tconst key = 'category'\r\n\t\t\tconst data = utils.filterArray(ProductListData, key, value)\r\n\t\t\tsetList(data)\r\n\t\t} else {\r\n\t\t\tsetList(ProductListData)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<Flex alignItems=\"center\" justifyContent=\"space-between\" mobileFlex={false}>\r\n\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t<Input placeholder=\"Search\" prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"mb-3\">\r\n\t\t\t\t\t\t<Select \r\n\t\t\t\t\t\t\tdefaultValue=\"All\" \r\n\t\t\t\t\t\t\tclassName=\"w-100\" \r\n\t\t\t\t\t\t\tstyle={{ minWidth: 180 }} \r\n\t\t\t\t\t\t\tonChange={handleShowCategory} \r\n\t\t\t\t\t\t\tplaceholder=\"Category\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Option value=\"All\">All</Option>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcategories.map(elm => (\r\n\t\t\t\t\t\t\t\t\t<Option key={elm} value={elm}>{elm}</Option>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button onClick={addProduct} type=\"primary\" icon={<PlusCircleOutlined />} block>Add product</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Flex>\r\n\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t<Table \r\n\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\tdataSource={list} \r\n\t\t\t\t\trowKey='id' \r\n\t\t\t\t\trowSelection={{\r\n\t\t\t\t\t\tselectedRowKeys: selectedRowKeys,\r\n\t\t\t\t\t\ttype: 'checkbox',\r\n\t\t\t\t\t\tpreserveSelectedRowKeys: false,\r\n\t\t\t\t\t\t...rowSelection,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default ProductList\r\n","// This icon file is generated automatically.\nvar DeleteOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\" } }] }, \"name\": \"delete\", \"theme\": \"outlined\" };\nexport default DeleteOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DeleteOutlinedSvg\n  }));\n};\nDeleteOutlined.displayName = 'DeleteOutlined';\nexport default /*#__PURE__*/React.forwardRef(DeleteOutlined);"],"names":["renderAvatar","props","className","type","text","name","suffix","subTitle","id","src","icon","size","shape","gap","onNameClick","to","APP_PREFIX_PATH","onClick","EllipsisDropdown","overlay","menu","placement","trigger","defaultProps","Flex","styled","justifyContent","alignItems","flexDirection","padding","margin","baseStyle","display","Utils","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","this","getRouteInfo","hex","hRed","parseInt","cutHex","substring","hGreen","h","hexToG","hBlue","hexToB","charAt","color","percent","R","G","B","RR","toString","length","GG","BB","rgba","trim","str","replace","inParts","indexOf","split","r","g","b","a","parseFloat","toFixed","outParts","Math","round","forEach","part","i","join","number","positive","negative","key","toLowerCase","list","value","data","filter","item","input","searchText","screens","breakpoints","push","Option","Select","categories","navigate","useNavigate","useState","ProductListData","setList","selectedRows","setSelectedRows","selectedRowKeys","setSelectedRowKeys","viewDetails","row","deleteRow","elm","utils","tableColumns","title","dataIndex","render","_","record","AvatarStatus","image","sorter","price","displayType","prefix","thousandSeparator","stock","stockCount","status","EyeOutlined","DeleteOutlined","rowSelection","onChange","rows","mobileFlex","placeholder","SearchOutlined","e","currentTarget","searchArray","onSearch","defaultValue","style","minWidth","map","PlusCircleOutlined","block","columns","dataSource","rowKey","preserveSelectedRowKeys","ref","React","AntdIcon","_objectSpread","DeleteOutlinedSvg","displayName"],"sourceRoot":""}